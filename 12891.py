# DNA 비밀번호
# 시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
# 2 초	512 MB	29832	10890	7899	35.141%
# 문제
# 평소에 문자열을 가지고 노는 것을 좋아하는 민호는 DNA 문자열을 알게 되었다. DNA 문자열은 모든 문자열에 등장하는 문자가 {‘A’, ‘C’, ‘G’, ‘T’} 인 문자열을 말한다. 예를 들어 “ACKA”는 DNA 문자열이 아니지만 “ACCA”는 DNA 문자열이다. 이런 신비한 문자열에 완전히 매료된 민호는 임의의 DNA 문자열을 만들고 만들어진 DNA 문자열의 부분문자열을 비밀번호로 사용하기로 마음먹었다.

# 하지만 민호는 이러한 방법에는 큰 문제가 있다는 것을 발견했다. 임의의 DNA 문자열의 부분문자열을 뽑았을 때 “AAAA”와 같이 보안에 취약한 비밀번호가 만들어 질 수 있기 때문이다. 그래서 민호는 부분문자열에서 등장하는 문자의 개수가 특정 개수 이상이여야 비밀번호로 사용할 수 있다는 규칙을 만들었다.

# 임의의 DNA문자열이 “AAACCTGCCAA” 이고 민호가 뽑을 부분문자열의 길이를 4라고 하자. 그리고 부분문자열에 ‘A’ 는 1개 이상, ‘C’는 1개 이상, ‘G’는 1개 이상, ‘T’는 0개 이상이 등장해야 비밀번호로 사용할 수 있다고 하자. 이때 “ACCT” 는 ‘G’ 가 1 개 이상 등장해야 한다는 조건을 만족하지 못해 비밀번호로 사용하지 못한다. 하지만 “GCCA” 은 모든 조건을 만족하기 때문에 비밀번호로 사용할 수 있다.

# 민호가 만든 임의의 DNA 문자열과 비밀번호로 사용할 부분분자열의 길이, 그리고 {‘A’, ‘C’, ‘G’, ‘T’} 가 각각 몇번 이상 등장해야 비밀번호로 사용할 수 있는지 순서대로 주어졌을 때 민호가 만들 수 있는 비밀번호의 종류의 수를 구하는 프로그램을 작성하자. 단 부분문자열이 등장하는 위치가 다르다면 부분문자열이 같다고 하더라도 다른 문자열로 취급한다.

# 입력
# 첫 번째 줄에 민호가 임의로 만든 DNA 문자열 길이 |S|와 비밀번호로 사용할 부분문자열의 길이 |P| 가 주어진다. (1 ≤ |P| ≤ |S| ≤ 1,000,000)

# 두번 째 줄에는 민호가 임의로 만든 DNA 문자열이 주어진다.

# 세번 째 줄에는 부분문자열에 포함되어야 할 {‘A’, ‘C’, ‘G’, ‘T’} 의 최소 개수가 공백을 구분으로 주어진다. 각각의 수는 |S| 보다 작거나 같은 음이 아닌 정수이며 총 합은 |S| 보다 작거나 같음이 보장된다.

# 출력
# 첫 번째 줄에 민호가 만들 수 있는 비밀번호의 종류의 수를 출력해라.


# presudo code
# checkList 비밀번호 체크 리스트
# myList 현재 상태 리스트
# checkSecret 문자 몇 개가 갯수를 충족했는지 판단하는 변수

# def my add 문자를 더하는 함수:
#     myList에 새 값을 더하고 조건에 따라서 checkList를 업데이트

# def myremove 문자를 빼는 함수:
#     myList에서 새 값을 제거하고 조건에 따라서 checkList를 업데이트

# S 문자열 크기, P 부분 문자열 크기
# A 문자열 데이터
# checkList 데이터 받기
# checkList를 탐색해 값이 0인 데이터 개수만큼 checkSecret이 증가
# => 값이 0이라는 건 비번 개수가 만족되었다는 의미!
# P의 범위만큼 myList와 checkSecret에 적용 후 유효한 비번인지 판단

# for i를 P부터 S까지 반복:
#     j 선언
#     myadd, myremove 함수로 구현
#     한 칸씩 이동하며 제거되는 문자열과 새 문자열 처리
#     유효한 비번인지 판단해 결과 업데이트

# 결과 출력

# Solution Code by GPT
# 답 코드가 계속 틀리길래 그냥 GPT한테 짜달라고 함

S, P = map(int, input().split()) # 각각 문자열 크기, 부분 문자열 크기

# 주어진 DNA 문자열 리스트
A = list(input())  

# 비번으로 쓰기 위해 각 문자의 최소 갯수를 저장하는 리스트
checkList = list(map(int, input().split()))

# 문자 'A', 'C', 'G', 'T'의 현재 개수를 세는 리스트
# 각 요소는 순서대로 문자의 개수를 나타냄
myList = [0] * 4 # = [0, 0, 0, 0]

# 결과 변수
Res = 0

# 슬라이딩 윈도우의 초기 상태 설정 (첫 P 길이만큼)
# 각 문자의 갯수를 요소로 저장
for i in range(P):
    if A[i] == 'A':
        myList[0] += 1
    elif A[i] == 'C':
        myList[1] += 1
    elif A[i] == 'G':
        myList[2] += 1
    elif A[i] == 'T':
        myList[3] += 1

# 초기 상태에서 조건이 만족하는지 체크
# myList에 할당된 문자 갯수들이 조건에 만족하지 않으면(최소 갯수보다 작으면) false 반환
def check():
    for i in range(4):
        if myList[i] < checkList[i]:
            return False
    # 아닌 경우에는 True(최소 갯수보다 크거나 같은 경우)
    return True

# 첫 번째 윈도우에서 조건 만족하면 결과 증가
# check() 함수가 True를 반환하면 Res에 1을 더함
if check():
    Res += 1


# 슬라이딩 윈도우
for i in range(P, S):
    # 새 문자 추가
    if A[i] == 'A':
        myList[0] += 1
    elif A[i] == 'C':
        myList[1] += 1
    elif A[i] == 'G':
        myList[2] += 1
    elif A[i] == 'T':
        myList[3] += 1

    # 이전 문자 제거
    # i - P는 이전 윈도우의 첫 번째 문자
    # 이동했기 때문에 새 슬라이딩 윈도우에서 갯수를 세야함.
    # 따라서 이전 윈도우 슬라이딩에 의한 값은 제거하는 것!
    # 이 과정을 통해 새 윈도우 슬라이딩에서 위의 로직을 수행함.
    if A[i - P] == 'A':
        myList[0] -= 1
    elif A[i - P] == 'C':
        myList[1] -= 1
    elif A[i - P] == 'G':
        myList[2] -= 1
    elif A[i - P] == 'T':
        myList[3] -= 1

    # 현재 윈도우에서 조건 만족하면 결과 증가
    if check():
        Res += 1

# 결과 출력
print(Res)
